import { Button } from "std-widgets.slint";
import { LoginWindow } from "src/ui/login.slint";

export component MainWindow inherits Window {
    // Set minimum and maximum sizes if needed
    min_width: 800px;
    min_height: 600px;
    max_width: 1280px;
    max_height: 720px;

    title: "Discord App";

    in property <[string]> server_names;
    in property <[string]> server_ids;
    in property <[string]> server_channels_names;
    in property <[string]> server_channels_ids;
    in property <[string]> channel_messages;
    property <bool> show_login: true;
    property <string> chat_message;
    property <string> current_channel_id;
    property <length> login_screen_pos : 0px;

    public function toggle_show_login() {
        show_login = !show_login;
        login_screen_pos = -400px;
    }

    callback ServerButtonClicked(string);
    callback ServerChannelButtonClicked(string);
    callback process_login(string, string);
    callback send_message(string, string);

    Rectangle {
        width: 400px;
        x: login_screen_pos;
        z: 1;
        background: orange;

        animate x {
            duration: 1000ms;
            easing: ease-in-out;
        }


        if show_login : LoginWindow{login_clicked(username, password) => {process_login(username, password)}}
    }

    HorizontalLayout {
        // Sidebar
        VerticalLayout {
            width: 60px;
            height: parent.height;

            Rectangle {
                width: parent.width;
                height: parent.height;
                background: #182954;

                VerticalLayout {
                    width: parent.width;
                    height: parent.height;
                    padding-left: 5px;
                    padding-top: 5px;
                    spacing: 5px;

                    // First circle icon
                    Rectangle {
                        width: 50px;
                        height: 50px;
                        background: #ffa024;
                        border-radius: 25px;
                        Image {
                            source: @image-url("assets/discord_logo.png");
                            width: 70%;
                            height: 70%;
                        }
                    }

                    // Second circle icon
                    Rectangle {
                        width: 50px;
                        height: 50px;
                        background: #ff6600;
                        border-radius: 25px;
                        Image {
                            source: @image-url("assets/msteams_logo.png");
                            width: 70%;
                            height: 70%;
                        }
                    }

                    // Third circle icon
                    Rectangle {
                        width: 50px;
                        height: 50px;
                        background: #ffa024;
                        border-radius: 25px;
                        Image {
                            source: @image-url("assets/slack_logo.png");
                            width: 70%;
                            height: 70%;
                        }
                    }
                }
            }
        }

        // Content area with server names
        VerticalLayout {
            width: 20%;
            padding: 10px;
            spacing: 5px;

            // Display each server name in a text field
            for server_name[i] in server_names: Text {
                Rectangle {
                    background: #363e52;
                    Button {
                        property <string> server_id: server_ids[i];
                        text: server_name;

                        clicked => {
                            ServerButtonClicked(server_id)
                        }
                    }
                }
                    
            }
        }

        // Content area with server names
        VerticalLayout {
            width: 20%;
            padding: 10px;
            spacing: 5px;

            // Display each server name in a text field
            for server_channel_name[i] in server_channels_names: Text {
                Rectangle {
                    background: #363e52;
                    Button {
                        property <string> server_channel_id: server_channels_ids[i];
                        text: server_channel_name;

                        clicked => {
                            current_channel_id = server_channel_id;
                            ServerChannelButtonClicked(server_channel_id)
                        }
                    }
                }
                    
            }
        }

        VerticalLayout {
            padding: 10px;
            height: parent.height;
            spacing: 5px;

            Text {
                text: "Messages";
                color: white;
                font-size: 18px;
            }

            Flickable {
                height: parent.height - 150px;
            
                // The inner content that is scrollable
                VerticalLayout {
                    padding: 10px;
                    spacing: 5px;
            
                    // Iterate over the messages and display them
                    for channel_message[i] in channel_messages: Text {
                        Rectangle {
                            height: 20px;
                            background: #363e52;
            
                            Text {
                                text: channel_message;
                            }
                        }
                    }
                }
            }

             // Message input and send button section
             HorizontalLayout {
                height: 50px;
                spacing: 10px;

                // Text input for the message
                TextInput {
                    width: 80%;   // Adjust width for the input box
                    text: "Type your message...";
                    edited => {chat_message = self.text}
                }

                // Send button
                Button {
                    text: "Send";
                    clicked => {
                        // Trigger send message callback with input text
                        send_message(current_channel_id, chat_message);
                    }
                }
            }
        }
    }
}
